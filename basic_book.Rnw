\documentclass[12pt,a4paper,oneside]{book}
\usepackage{amsmath,amsthm,amsfonts,amssymb}
\usepackage{pst-eucl,pstricks,pstricks-add}
\usepackage[utf8]{inputenc}
%\usepackage[latin1]{inputenc}
\usepackage[spanish,activeacute]{babel}
\usepackage[a4paper,margin=2.5cm]{geometry}
\usepackage{times}
\usepackage[T1]{fontenc}
\usepackage{titlesec}
\usepackage{color}
\usepackage{url}
\usepackage{float}
\usepackage{cite}
\usepackage{graphicx}
%\usepackage{lipsum}
\usepackage{multicol}
\usepackage{float}
\usepackage{lmodern}
\newcommand{\code}[1]{\fcolorbox{white}{gray!15}{#1}}
\parindent=0mm
\begin{document}
\pagecolor[gray]{0.95}

%%% modificacion preambulo
\makeatletter
\def\thickhrulefill{\leavevmode \leaders \hrule height 1ex \hfill \kern \z@}
\def\@makechapterhead#1{%
  \reset@font
  \vspace*{10\p@}%
  {\parindent \z@ 
    \begin{flushleft}
      \reset@font \scshape \bfseries \Huge \thechapter \par
    \end{flushleft}
    \hrule
    \begin{flushleft}
      \reset@font \LARGE \strut #1\strut \par
    \end{flushleft}
    \vskip 80\p@
  }}
\def\@makeschapterhead#1{%
  \reset@font
  \vspace*{10\p@}%
  {\parindent \z@ 
    \begin{flushleft}
      \reset@font \scshape \bfseries \Huge \vphantom{\thechapter} \par
    \end{flushleft}
    \hrule
    \begin{flushleft}
      \reset@font \LARGE \strut #1\strut \par
    \end{flushleft}
    \vskip 80\p@
  }}
%%%

% Portada
\begin{titlepage}
\begin{center}
~\\[3cm]
\textbf{\Huge \textcolor{blue!90}{\fontsize{12mm}{5em}\selectfont SOURCE STAT LAB}}\vspace{0.6cm}\\
\textbf{\Large \textcolor{blue}{Training, Reporting and Consultancy}}
\vspace{4cm}\\
\textbf{\huge CURSO:} \vspace{0.6cm}\\
\textbf{\Large Introducción al programa estadístico R} \vspace{4cm}\\
\textbf{\Large R Nivel Básico}\vspace{2cm}\\
\includegraphics[scale=.7]{logo_source.eps}
\vspace{1.5cm}

\textbf{\Large Quito, Febrero 2015}
\end{center}
\end{titlepage}
\pagecolor{white}

%Derechos

% Contenidos
\tableofcontents
\newpage

% Dedicatoria
\setcounter{page}{0}
\cleardoublepage
\vspace*{\stretch{1}}
\hfill
\begin{minipage}[t]{0.66\textwidth}
\raggedleft
\thispagestyle{empty}
\textit{Un aporte de Source Stat Lab Ecuador a la sociedad.}
\end{minipage}
\vspace*{\stretch{3}}
\clearpage


\chapter{Introducción}

Para introducirnos en el mundo de R debemos tener claro dos conceptos: lenguaje de programación y entorno estadístico, pues R integra un conjunto de herramientas y un lenguaje de comandos para la manipulación de datos, la realización de cálculos y análisis estadísticos, así como su representación gráfica en alta calidad.\newline

R se encuentra enmarcado como un programa estadístico flexible, potente y profesional que se distribuye bajo GNU General Public License como \emph{software libre}, y en la actualidad es muy utilizado por la comunidad científica debido a su doble naturaleza, como lenguaje y como entorno.
\begin{figure}[H]
\centering
\includegraphics[scale=.15]{logo_r.eps}
\caption{Logo del proyecto R}
\label{logo_r}
\end{figure}
Dadas sus características R tiene gran potencial para ser utilizado en diferentes áreas de la estadística, finanzas, simulación, reportería dinámica, biomatemática, minería de datos, big data, etc. R puede ser instalado en diversas plataformas y sistemas operativos tales como: Windows, Linux, Mac OS X y Unix.

\section{Historia}

El proyecto R se inició como un experimento para utilizar métodos de Lisp en la construcción de un pequeño banco de pruebas que sirvan para evaluar posibles construcciones de entornos estadísticos. Desde el inicio del proyecto se decidió usar la syntaxis de S, la misma que con el transcurso del tiempo se volvió irresistible.\newline

Ross Ihaka inicia el proyecto R tras haber obtenido acceso a cierta información importante sobre el lenguaje S, misma que fue publicada por John Chambers y Rick Becker. En corto tiempo, Ross nota las similitudes existentes entre S y Scheme, en su afán de mostrarse ante Alan Zaslavsky\footnote{Alan M. Zaslavsky, PhD, es profesor de estadística en el Departamento de Cuidado de la Salud en la Escuela Médica de Harvard.} le propone indicar el uso del ámbito léxico para la obtención de variables propias. Sin ninguna copia de Scheme trata de mostrarle usando S, sin embargo sus intentos fracasan debido a las diferencias entre las reglas de asignación que tiene S y Scheme, esto le llevó a darse cuenta que S requería ciertas funcionalidades extras para lograr convertirse en un entorno estadístico.\newline

Tiempo más tarde, Ross Ihaka $\&$ Robert Gentleman llegan a ser colegas en la Universidad de Auckland\footnote{Universidad pública situada en Auckland. Fue fundada en 1883 como parte de la Universidad de Nueva Zelanda.}, y ambos muestran interés en temas de Estadística Computacional, como profesores del Departamento de Estadística ven la necesidad de mejorar un ambiente del laboratorio de computación e inician su trabajo con la visión de crear un lenguaje similar al S pero con más funcionalidades, mismas que ya fueron identificadas por Ross previamente en su intento de incluir los ámbitos léxicos.

\begin{figure}[H]
\centering
\includegraphics[height=4.5cm, width=3.5cm]{Ross.eps}
\includegraphics[height=4.5cm, width=3.5cm]{Robert.eps}
\caption{Ross Ihaka $\&$ Robert Gentleman}
\label{creadores}
\end{figure}

El desarrollo de R como tal inició en el año de 1991, el progreso fue bastante bueno por lo que para Agosto de 1993 decidieron colocar algunas copias binarias de R en Statlib y a su vez anunciaron al público el lanzamiento de la versión alfa del programa por medio de la lista de noticias de S (\emph{S news mailing list}). De manera sorpresiva un gran número de personas ofrecieron su retroalimentación sobre la versión que habían liberado, entre ellos el más persistente fue su amigo Martin Machler que los animó a liberar el código fuente de manera que R se distribuya bajo licencia GNU General Public License, por lo cual en Junio de 1995 aparece la primera versión libre (\emph{open source}), el interés por R creció rapidamente al punto que para Marzo de 1996 fue necesario crear la propia lista de noticias y un año más tarde se tuvo que reemplazar por listas específicas: R-announce, R-help $\&$ R-devel, esto debido a la gran cantidad de consultas que realizaban los usuarios en varios temas relacionados.\newline

Para a mediados de 1997 se estableció el {\bf R Core Group} o {\bf R Core Team}, un grupo de desarrolladores talentosos y experimentados con permisos para manipular el código fuente de R, en sus inicios lo conformaban:
\begin{multicols}{3}
\begin{itemize}
   \item Ross Ihaka
   \item Robert Gentleman
   \item Martin Machler
   \item Doug Bates
   \item Peter Dalgaard
   \item Kurt Hornik
   \item Friedrich Leisch
   \item Thomas Lumley
   \item Paul Murrell
   \item Heiner Schwarte
   \item Luke Tierney
\end{itemize}
\end{multicols}

Entre sus tareas iniciales se encontraba realizar los cambios en el código fuente de acuerdo a los bugs reportados por los usuarios, todas las tareas se realizaban de manera voluntaria pues el grupo se formó sin fines de lucro, en la actualidad lo conforman alrededor de 20 personas que se encuentran en 11 diferentes cuidades del mundo.\newline

Para Febrero del año 2000 aparece la versión 1.0.0. Desde entonces el programa se distribuye gratuitamente a través del repositorio \emph{Comprehensive R Archive Network} (CRAN) en \url{http://www.r-project.org} su mantenimiento se encuentra a cargo del grupo R Core Team desde el año 1997 asistido por una gran cantidad de colaboradores internacionales.\newline

El CRAN es fundamental para el uso de R, pues es el lugar desde el cual se obtiene el programa o cualquier paquete que se desee instalar, y con la finalidad de evitar el colapso del \emph{mundo estadístico} no se tiene una única ubicación al que todo mundo tiene acceso, el CRAN se \emph{refleja} en diferentes lugares de todo el mundo de esta manera como residente de Ecuador, podría acceder a una ubicación CRAN en Ecuador\footnote{En Ecuador se cuenta con el CRAN de la Escuela Politécnica del Litoral}, mientras que si se encuentra en un país que no tiene repositorio lo más recomendable es acceder a la copia del repositorio de un país cercano. Los países desarrollados como EEUU, tienen múltiples CRAN's para abastecer a ellos: la filosofía básica es elegir un repositorio que se encuentre geográficamente cercano al usuario.\newline 

R es considerado la versión libre del programa comercial S-Plus, el cual fue desarrollado para AT$\&$T Bell Laboratories por John M. Chambers en el año 1988, aunque son evidentes las diferencias entre R y S, la gran mayoría del código escrito para S funciona sin inconvenientes en R.\newline

El mayor inconveniente para los nuevos usuarios de R es adaptarse a su interfaz gráfica que para muchos es \emph{poco amigable}, en el sentido que se deben tipear las funciones predefinidas o a su vez programar las funciones nuevas a diferencia de programas clásicos como SPSS, STATA, etc. en los cuales se tienen botones o ventanas que despliegan opciones de análisis para el usuario. \newline

Dada la popularidad que ha adquirido R en los últimos años se han desarrollado varias interfaces gráficas libres  GUIS's (Grafical User Interface) con el fin de volver más amigable la interacción con el usuario. Entre las interfaces más populares y utilizadas por la comunidad se encuentran:
\begin{multicols}{3}
\begin{itemize}
  \item RStudio
  \item Rattle
  \item Deducer
  \item RKWard
  \item Eclipse
  \item Knime
  \item R Analytic Flow
  \item JGR
  \item ESS
  \item Red -R
  \item R Commander
\end{itemize}
\end{multicols}

%En posteriores secciones mostraremos las funcionalidades de RStudio y R Analitic Flow, 

\section{Soporte}

R al ser un programa GNU General Public License carece de soporte técnico, sin embargo, en la actualidad existen empresas que proveen varios tipos de soportes para R bajo pago. Entre las más destacadas se encuentran:
\begin{multicols}{2}
\begin{itemize}
  \item RStudio, Inc.
  \item Revolution Analytics, Inc.
  \item XL - Solutions Corporation.
  \item Quantide, Inc.
\end{itemize}
\end{multicols}

De las empresas antes mencionadas se destaca de sobremanera Revolution Analytics\footnote{Revolution Analytics fue fundada en el año 2007 con la finalidad de dar soporte comercial al software Revolution R, adicionalmente provee componentes tales como: ParallelR, RevoScaleR, RevoDeployR, etc.}, Inc. por su modificación del código fuente de R lo cual ha permitido que R sea multicore, es decir, a través de estas modificaciones se logra aprovechar al máximo la funcionalidad de todos los núcleos de los procesadores (16 núcleos para procesadores Core i7, etc.). El impacto inmediato de que R sea multicore se ve reflejado en la mayor velocidad de lectura y escritura de información permitiendo de este modo trabajar con grandes cantidades de datos sin ningún problema, así como también en la reducción del tiempo de ejecución.\newline

El programa R optimizado por Revolution Analytics, Inc. puede ser obtenido a través de la página web \url{http://www.revolutionanalytics.com} como \emph{Revolution R Open} de forma gratuita, sin embargo en el caso de requerir soporte se puede adquirir la versión pagada \emph{Revolution R Enterprise}.
\begin{figure}[H]
\centering
\includegraphics[scale=.5]{logo_rro.eps}
\caption{Revolution R Open}
\label{logo_ropen}
\end{figure}

\section{Funcionamiento}

R es un lenguaje orientado a objetos (OOP\footnote{La programación OOP está basada en varias técnicas: herencia, clasificación, identidad, polimorfismo y encapsulamiento.}) dise\~nado en un entorno auténtico bajo el cual esconde su simplicidad y flexibilidad, lo cual permite a sus usuarios a\~nadir funcionalidad mediante la definición de nuevas \emph{funciones}. El término \emph{orientado a objetos} hace referencia a un paradigma de la programación que emplea objetos en sus interacciones y diseño de aplicaciones. R almacena sus variables, datos, funciones, resultados, etc., en la memoria activa del computador en forma de objetos con un nombre específico y pueden ser modificados o manipulados por el usuario mediante operadores y funciones. El uso y funcionamiento de los operadores en R es bastante intuitivo y se lo verá a detalle más adelante.\newline

El hecho que R sea un lenguaje de programación puede desmotivar a muchos usuarios los cuales piensan que para iniciarse en el programa se necesita \emph{alma de programador} lo cual no es cierto. Primero R es un lenguaje interpretado similar a Java, y segundo no es un lenguaje compilado a diferencia de C, C++, Fortran, Pascal, ect. sino más bien mediante comandos ingresados por teclado los cuales se ejecutan directamente sin necesidad de construir archivos ejecutables.\newline

En su mayoría R se encuentra programado en C++, Python y Fortran, esto implica que R tiene la capacidad de interpretar código externo mediante el uso de ciertas librerías. La utilidad básica de lo anterior se encuentra en elaborar scripts por ejemplo en C++ que emplean menor tiempo de ejecución.\newline 

El programa R incluye 8 bibliotecas o paquetes estándar, sin embargo, las capacidades de R pueden ser ampliadas fácilmente mediante la incorporación de paquetes que se encuentran disponibles en varios repositorios como:
\begin{multicols}{2}
\begin{itemize}
  \item CRAN
  \item BioConductor
  \item Github
  \item Omegahat
  \item MRAN
  \item RForge, entre otros.
\end{itemize}
\end{multicols}

Los paquetes estándar de R pueden ser visualizados a través del siguiente comando:

<<>>=
search()
@

En la actualidad\footnote{Información obtenida al 21 de Diciembre 2014.} existen 6129 paquetes válidos en el repositorio CRAN, los cuáles se encuentran ordenados por fecha de publicación o alfabéticamente agrupadas en diversas líneas de investigación.

\section{Ventajas}

Entre las principales ventajas que posee el software R podemos anotar lo siguiente:
\begin{itemize}
  \item Al tratarse de un software libre el costo es nulo.
  \item Se han implementado una gran cantidad de métodos estadísticos desde los más básicos hasta los más avanzados y modernos. Todos los métodos se encuentran organizados en librerías, las cuales se encuentran en constante crecimiento.
  \item Capacidad para acceder a datos de múltiples formatos. En la actualidad existen varias librerias para leer datos desde SPSS, SAS, STATA, MySQL, Excel, etc.
  \item Gran capacidad para la manipulación de datos y funciones, así como para la generación de gráficos de alta calidad.
  \item Facilidad para enlazarse con LaTeX y generar reportes dinámicos.
  \item Amplia bibliografía tanto en internet como en libros publicados por prestigiosas editoriales como: Springer, Wiley, O'Reilly, Chapman $\&$ Hall/CRC, etc.
  \item Fácil visualización e interpretación de los algoritmos implementados en R con lo cual el usuario puede conocer exactamente lo que el ordenador ejecuta.
  \item Permite visualizar los algoritmos en él implementados, modificarlos y ajustarlos a nuestras necesidades (esto no es permitido en los softwares licenciados).
  \item Una gran comunidad de usuarios, lo cual permite obtener ayuda de manera fácil de expertos por medio de la R help mailing list entre otros.
\end{itemize}

\section{Desventajas}

Los inconvenientes a los cuales se deben enfrentar los usuarios de R son:
\begin{itemize}
  \item Al ser un programa libre carece de un departamento de atención al cliente al cual se pueda recurrir en caso de que se reporte un inconveniente con el mismo. Sin embargo existe una comunidad en crecimiento de usuarios de R que se encuentran dispuestos a colaborar desinteresadamente en la resolución de problemas.
  \item El software R como tal no dispone de una interfaz amigable para el usuario, las tareas se llevan a cabo a través de líneas de comando lo cual puede resultar difícil para el usuario común. No obstante con el desarrollo de GUI's se ha facilitado en gran medida la experiencia del programa con el usuario común.
  \item El código en R es interpretado, no compilado, lo cual puede ocasionar una ejecución lenta en ocasiones en las que se realizan simulaciones intensas. Con el fin de remediar lo anterior el grupo R Core Team a partir de la versión 2.14 ha precompilado todas las funciones y librerías de R con el objetivo de acelerar la ejecución.
  \item R no es particularmente un lenguaje de programación rápido, si a eso sumamos que muchos usuarios escriben pobremente su código obtenemos como resultado un funcionamiento lento.
\end{itemize}



\chapter{Instalación y actualización}

En esta sección mostraremos los pasos a seguir para la instalación, actualización del programa y sus paquetes. Asumiremos que el usuario se encuentra trabajando sobre un computador con sistema Windows, sin embargo, no existe mayor diferencia en los pasos a seguir en el caso que el usuario use un sistema operativo diferente.

\section{Programa R}

La instalación del programa R se describe en los siguientes pasos:
\begin{enumerate}
  \item Accedemos a la página web del R Project a través de un navegador tecleando la dirección: \url{http://www.r-project.org}.
  
  \begin{figure}[H]
    \centering
    \includegraphics[scale=.4]{install1.eps}
    \caption{Página web R-Project}
    \label{rproject}
  \end{figure}
  
  \item Ingresamos a la CRAN para elegir un repositorio cercano a nuestra localidad. En nuestro caso seleccionamos el repositorio de la Escuela Politécnica de Litoral.
  
  \begin{figure}[H]
    \centering
    \includegraphics[width=4.5cm,height=1.5cm]{install2.eps}
    \caption{Repositorio Espol}
    \label{respol}
  \end{figure}
  
  \item Nos dirigimos a la parte superior de la página, y nos ubicamos en \texttt{Download and install R} seguido elegimos el sistema operativo. Para nuestro caso hacemos click en \texttt{Windows}.
  
  \begin{figure}[H]
    \centering
    \includegraphics[width=8cm,height=3.5cm]{install3.eps}
    \caption{Selección Sistema Operativo}
    \label{soperativo}
  \end{figure}
  
  \item A continuación elegimos entre los 3 subdirectorios: \texttt{base}, \texttt{contrib} y \texttt{RTools}. Damos click sobre \texttt{base}.
  
  \begin{figure}[H]
    \centering
    \includegraphics[width=9cm,height=4cm]{install4.eps}
    \caption{Subdirectorios}
    \label{subdirectorio}
  \end{figure}
  
  \item Finalmente, en la pantalla damos click sobre \texttt{Download R X.Y.Z for Windows}, con lo cual descargamos la versión de R más reciente.
  
  \begin{figure}[H]
    \centering
    \includegraphics[width=7.5cm,height=2.5cm]{install5.eps}
    \caption{Descarga programa}
    \label{download}
  \end{figure}
  
\end{enumerate}

En la actualidad, el software R puede ser instalado incluso sobre la plataforma Android\footnote{\url{https://play.google.com/store/apps/details?id=com.appsopensource.R&hl=es_419}}, esto permite que muchos usuarios puedan tener el programa al alcance y en todo momento con tan sólo tener un smartphone operativo.

\section{Entorno de trabajo}
Es muy importante para el usuario de R, conocer su entorno de trabajo, y es precisamente lo que trataremos en esta sección. Antes de iniciar, debemos aclarar que el presente documento está enfocado en la plataforma \texttt{Windows}, sin embargo en los diferentes sistemas operativos no existe mayor diferencia.

\begin{figure}[H]
\centering
\includegraphics[scale=.35]{console.eps}
\caption{Entorno de trabajo de R}
\label{entorno}
\end{figure}

Iniciaremos explicando  la barra de herramientas, la misma que consta de las secciones: Archivo, Editar, Visualizar, Misc, Paquetes, Ventanas y Ayuda. Todas serán explicadas con detalle a continuación:

\begin{itemize}
  \item {\bf \Large Archivo:} En esta sección se podrá tratar todo lo relacionado con el manejo de archivos y salir del programa. Los elementos que lo componen son los siguientes:
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{archivo.eps}
  \caption{Sección Archivo}
  \label{archivo}
  \end{figure}

    \begin{itemize}
      \item {\bf Interpretar código fuente R:} Hay que recordar que R es un lenguaje de programación derivado del S, es por ello que podemos realizar programas en un editor externo, con esta opción podemos ejecutar dicho programa en la consola siempre y cuando, la extensión de guardado sea del tipo .R.
      \item {\bf Nuevo script:} Si lo ejecutamos, se nos abrirá un editor de lenguaje R para crear script que luegos podemos llamar desde la consola, el tipo de archivo que podemos generar son R o S.
      \item {\bf Abrir script:} Los script que hemos generados o que tengamos del tipo R o S podemos abrirlos en un editor para poder editarlos.
      \item {\bf Mostrar archivo(s):} Siver para abrir y poder visualizar o editar cualquier archivo, es interesante para los que tengan relación con el lenguaje R o S. Se diferencia con la opción Abrir script de que éste no puede editarlos directamente, simplemente visualizarlos. Se pueden abrir varios archivos a la vez.
      \item {\bf Cargar área de trabajo:} Pues como su nombre indica, sirve para cargar un área de trabajo que hayamos configurado y guardado previamente, es útil por ejemplo, cuando hemos definido el tipo de letra, el espacio de trabajo, los colores, etc, y queremos usarlo. La extensión común es .RData aunque también puede cargarse entornos de trabajo con formato antiguo tipo .rda.
      \item {\bf Guardar área de trabajo:} Cuando se haya configurado el entorno de consola de R, colores, tipo de letra, tamaño, etc, podemos guardarlo para cargarlo posteriormente en futuras aplicaciones ya que el propio programa R no guarda, de momento, dicha configuración. El formato del entorno de trabajo es .RData.
      \item {\bf Cargar Histórico:} Podemos cargar el archivo de comandos que se hayan ejecutado en una sesión previamente guardada. El formato de salida es .history.
      \item {\bf Guardar Histórico:} Con él, podemos guardar los comandos que hayamos instroducido por consola en una sesión. El formato de guardado es .history.
      \item {\bf Cambiar dir:} Podemos configurar el directorio de trabajo que está definido por defecto cuando se instalo el programa.
      \item {\bf Imprimir:} Podemos configurar e imprimir el entorno de trabajo de R, la consola.
      \item {\bf Guardar en archivo:} Se guardará todo lo que se haya escrito por la consola en formato .txt que después podremos recuperar.
      \item {\bf Salir:} Sirve para salir del programa R, antes nos preguntará si queremos guardar el área de trabajo.
    \end{itemize}
  \item {\bf \Large Editar:} Es la sección encargada de editar la consola de R, así como de configurar el entorno de trabajo.
  \begin{itemize}
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{editar.eps}
  \caption{Sección Editar}
  \label{editar}
  \end{figure}
  
      \item {\bf Copiar:} Podemos copiar al portapapeles el comando o sentencia o lo que queramos de la consola. Para acceder de forma
      rápida por teclado se debe pulsar: Ctrl + C.
      \item {\bf Pegar:} Podemos pegar en la consola aquello que tengamos en el portapapeles. Para acceder de forma rápida por teclado
      se debe pulsar: Ctrl + V.
      \item {\bf Pegar solo comandos:} La diferencia básica con la opción Pegar es que con esta opción, sólo se pegarán en la consola
      aquello que sea comandos para ejecutarse.
      \item {\bf Copiar y Pegar:} Todo aquello que copiemos, directamente se pegará, de forma inmediata, en la consola. Para acceder de
      forma rápida por teclado se debe pulsar: Ctrl + X.
      \item {\bf Seleccionar todo:} Como su nombre indica, se selecciona todo lo que esté presente en la consola.
      \item {\bf Limpiar consola:} Se borrarán todo lo que esté presente en la consola, pero ojo, no se borrarán las variables y estructuras definidas. Es útil cuando tenemos en la consola mucha información que ya no es útil. Para acceder de forma rápida por
      teclado se debe pulsar: Ctrl + L.
      \item {\bf Editor de datos:} Podemos definir datos (vectores, estructuras, funciones, etc) y guardarlos para posteriormente llamarlos en la consola. Estos datos estarán definidos en la consola cuando se guarde.
      \item {\bf Preferencias de la interfaz gráfica:} En esta opción es donde podremos configurar todo lo relacionado a la visualización de texto reflejado en la consola: tamaño de letra, colores, tipo de letra, etc. También, se puede configurar el entorno de trabajo, para multiventana o una única ventana.
    \end{itemize}
  \item {\bf \Large Visualizar:} Activa la visualización de algunos iconos en la parte superior tales como: Abrir script, Cargar área de trabajo, etc., mismas que ya se detallaron anteriormente.
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{visualizar.eps}
  \caption{Sección Visualizar}
  \label{visualizar}
  \end{figure}
  
  \item {\bf \Large Misc:} Esta es la sección denominada misceláneas, donde hay más de un control interesante.
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{misc.eps}
  \caption{Sección Misc}
  \label{misc}
  \end{figure}
    \begin{itemize}
      \item {\bf Parar computación actual:} Este control es muy interesante y útil, con él, podremos parar cualquier archivo, sentencia o código que esté ejecutando la consola R. Para acceder de forma rápida por teclado se debe pulsar: ESC.
      \item {\bf Salida con buffer:} Para acceder de forma rápida por teclado se debe pulsar: Ctrl + W.
      \item {\bf Terminar palabra:} Es una ayuda interactiva, que nos ayuda a completar las palabras mientras estamos escribiendo en caso que la consola las reconózca.
      \item {\bf Terminar nombre de archivo:} Realiza la misma función que la opción Terminar palabra pero en archivos.
      \item {\bf Listar objetos:} Se nos mostrará por consola los objetos que hasta en este momento hemos definido en la consola.
      \item {\bf Remover todos los objetos:} Como su nombre indica, elimina de memoria todos los objetos que hayamos definido (datos, variables, matrices, vectores, etc) en la consola de R. Cuando pulsemos sobre dicha opción, el programa, nos preguntará si realmente queremos borrarlos.
      \item {\bf Listar el camino de búsqueda:} Nos ofrece por consola las librerias y complementos que tenemos instalados en R.
    \end{itemize}
  \item {\bf \Large Paquetes:} Dedicado al manejo de las librerias que posee el programa R.
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{paquetes.eps}
  \caption{Sección Paquetes}
  \label{paquetes}
  \end{figure}
    \begin{itemize}
      \item {\bf Cargar paquete:} Con él, podemos cargar en la consola cualquier libreria que tengamos instalada.
      \item {\bf Seleccionar espejo CRAN:} Sirve para configurar el servidor de librerias.
      \item {\bf Seleccionar repositórios:} En consola nos mostrará los repositorios que tenemos instalados y nos pedirá cual usar para la sesión activa.
      \item {\bf Instalar paquetes(s):} Podremos actualizar o instalar librerias nuevas en red, para ello, debemos elegir un servidor.
      \item {\bf Actualizar paquetes(s):} Podemos actualizar las librerias que tengamos instaladas en caso de haber una actualización reciente por red, para ello, debemos seleccionar un servidor
      \item {\bf Instalar paquetes(s) a partir de archivos zip locales:} En caso de haber descargado una libreria y tenerla en nuestro ordenador, podemos instalarlo mediante esta opción.
    \end{itemize}
  \item {\bf \Large Ventanas:} Permite configurar la visualización de las ventanas: consola, área de gráficos y editor de script en modo vertical, horizontal, etc.
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{ventanas.eps}
  \caption{Sección Ventanas}
  \label{ventanas}
  \end{figure}
  
  \item {\bf \Large Ayuda:} Es un apartado que debemos tenerlo siempre presente, ya que en él se dispone al usuario, los manuales de utilización y específicos de R.
  \begin{figure}[H]
  \centering
  \includegraphics[scale=.35]{ayuda.eps}
  \caption{Sección Ayuda}
  \label{ayuda}
  \end{figure}
    \begin{itemize}
      \item {\bf Console:} Nos mostrará en una ventana los atajos por teclado que posee la consola.
      \item {\bf FAQ en R:} Ayuda en html que se carga desde nuestro ordenador, donde nos ofrece las preguntas frecuentes que se suelen hacer los usuarios al utilizar R. No hace falta estar conectado a Internet.
      \item {\bf FAQ en R para Windows:} Preguntas frecuentes para los usuarios de Windows.
      \item {\bf Manuales en PDF:} Una recopilación de los manuales para el manejo del programa, esta opción es bastante interesante.
      \item {\bf Funciones R(texto):} Es una opción donde podremos introducir sentencias de comando para obtener ayuda sobre ellas, es bastante útil.
      \item {\bf Ayuda Html:} Se nos abrirá en el navegador una ayuda interactiva, no es necesario estar conectado a Internet.
      \item {\bf Html search page:} Consiste en una página html donde podremos buscar las instrucciones que queramos consultar.
      \item {\bf Página principal R:} Es un enlace directo a la web del proyecto R.
      \item {\bf Página principal de CRAN:} Enlace directo al directorio de librerias de R.
      \item {\bf Sobre:} Indica información de la compilación que se tenga instalada de R.
    \end{itemize}
\end{itemize}

\section{Instalación de paquetes}

Como habíamos señalado en la sección anterior, una de las principales ventajas de R es su capacidad para incrementar su funcionalidad mediante la incorporación de nuevos paquetes o librerías.\newline

Para entender de mejor manera la necesidad de emplear paquetes en R usaremos la siguiente metáfora: Imaginemos que tener instalado el programa en el computador es como haber adquirido un auto nuevo el cual cumple con ciertas funciones principales y no trae contratiempos, una vez que lo empezamos a rodar nos vamos dando cuenta de la necesidad de mejorar el rendimiento de ciertos mecanismos ya existentes del auto debido que lo vamos exponiendo a diferentes ambientes y condiciones. Lo anterior pasa exactamente con R, cuando  descargamos e instalamos el sotfware contamos con ciertas características y paquetes básicos pero existen miles de paquetes adicionales que pueden ser agregados para lograr mejorar su funcionalidad y a la vez realizar cosas estupendas.

\subsection{Repositorio CRAN}

La instalación de paquetes en R desde el repositorio CRAN es sencillo, una vez conocido el nombre del paquete ha ser instalado basta con introducir el siguiente comando en la consola:
<<eval=FALSE>>=
install.packages("nombre_paquete")
@
Ciertos paquetes de R requieren la instalación de otros paquetes adicionales debido que entre estos comparten algunas funciones (\emph{paquetes sugeridos}) para evitar tener inconvenientes con la instalación de un paquete se aconseja adicionar el parametro siguiente: 
<<eval=FALSE>>=
install.packages("nombre_paquete", dependencies=TRUE)
@
En el caso que se desee instalar un lista de $n$ paquetes planteamos la siguiente solución:
<<eval=FALSE>>=
paquetes <- c("pckg_1","pckg_2", ... , "pckg_n")
lapply(seq_along(paquetes), function(i){
      install.packages(paquetes[[i]], dependencies=TRUE)
      })
@

Una segunda alternativa al momento de instalar los paquetes de R consiste en obtener el archivo zipeado (.zip) desde el repositorio CRAN e instalarlo manualmente a través del menú del programa.\newline

Una vez instalado un paquete el paso siguiente consiste en cargar las funciones y datos del mismo dentro del área de trabajo, para esto tenemos dos comandos útiles: \code{\texttt{library()}} y \code{\texttt{require()}}, sin embargo lo más recomendable es utilizar el primero de ellos como se detalla a continuación:

<<eval=FALSE>>=
library('translate2R')

## Error in library("translate2R") : 
## there is no package called ‘translate2R’

require('translate2R')

## Loading required package: translate2R
## Warning message:
## In library(package, lib.loc=lib.loc, character.only=TRUE,
##          logical.return=TRUE,  
##         : there is no package called ‘translate2R’
@

Para mostrar la diferencia entre de los comandos anteriores trataremos de cargar el paquete \texttt{translate2R}, el mismo que no ha sido descargado previamente. Al emplear \texttt{library} observamos que nos arroja un error, mientras que al emplear \texttt{require} únicamente tenemos una advertencia. En el caso puntual que nos encontremos trabajando en un script la segunda opción nos causaría serios problemas dado que permite continuar con la ejecución del proceso sin que el usuario se percate, mientras que la primera opción alerta al usuario. Por todo lo antes mencionado la gran mayoría de usuarios R prefieren usar el comando \texttt{library}.\newline

En el caso que se desee cargar $n$ paquetes se tiene la siguiente solución:
<<eval=FALSE>>=
paquetes <- c("pckg_1","pckg_2", ... , "pckg_n")
lapply(paquetes, FUN=library, character.only=TRUE)
@

Si deseamos visualizar el listado completo de los paquetes instalados podemos recurrir al comando \code{\texttt{library()}}. Además, si deseamos conocer el lugar en el cual se instalan los paquetes podemos hacer lo siguiente:
<<>>=
.libPaths()
@

En algunas ocasiones los usuarios desean descargar los paquetes de R en una carpeta específica (C:/pckg\_down) e instalar los paquetes en otra carpeta diferente (D:/pckg\_inst), a continuación mostramos una posible solución al problema:
<<eval=FALSE>>=
install.packages("pckgs", destdir="C:/pckg_down", lib="D:/pckg_inst")
library("pckgs",lib.loc="D:/pckg_inst")
@
Conocer la totalidad de paquetes que se encuentran albergados en la CRAN, y a su vez verificar cuales de ellos se encuentran válidos y disponibles para su uso es posible mediante los siguientes comandos:
<<eval=FALSE>>=
installed.packages()
available.packages()
@
En el caso que se requiera conocer los paquetes que se encuentra cargados en el área de trabajo emplearemos el siguiente comando:
<<>>=
sessionInfo()
@
El comando anterior imprime información acerca de la versión y plataforma del ejecutable de R que se encuentra utilizando, adicionalmente muestra información de la localidad y de los paquetes adjuntos o cargados.\newline

Para ocasiones en las cuales se desee eliminar un paquete previamente instalado en R tenemos dos alternativas: la primera consiste básicamente en eliminar la carpeta que contiene dicho paquete del repositorio del computador mientras que la segunda alternativa consiste en emplear el siguiente comando:
<<eval=FALSE>>=
remove.packages("nombre_paquete", "directorio")
@
donde: 
\begin{itemize}
   \item {\bf nombre\_ paquete:} Nombre o vector de nombres de los paquetes ha ser eliminados.
   \item {\bf directorio:} Es un vector de caracteres que proporcionan la dirección del directorio del cual se eliminará el paquete. Si se omite dicho parámetro se asume por default la dirección obtenida por .libPaths().
\end{itemize}


\subsection{Repositorios externos}

Habiamos comentado sobre la existencia de varios repositorios adicionales al CRAN de entre los cuales destacan R-Forge\footnote{Sistema para el desarrollo y versionamiento de paquetes en R.}, BioConductor\footnote{Subproyecto dedicado a la investigación en bioestadística.} y Omegahat\footnote{Subproyecto dedicado al desarrollo de interfaces para la programación estadística basado en Java.}, dentro de estos repositorios se pueden encontrar paquetes que no se encuentran en el CRAN, o bien, versiones más actualizadas de los mismos.\newline

Para instalar los paquetes desde los repositorios externos antes mencionados basta la siguiente sentencia:
<<eval=FALSE>>=
install.packages("pckgname", repos="http://r-forge.r-project.org")
install.packages("pckgname", repos="http://www.omegahat.org/R")
install.packages("pckgname", repos="http://www.bioconductor.org/
                                    packages/2.10/bioc")
@
Algunos de los paquetes se encuentran en formato binario, para su instalación basta adicionar el parámetro \texttt{type="source"}.

\subsection{Github}

GitHub es un repositorio de archivos y proyectos el cual emplea un sistema de control de versiones conocido como Git. Github fue lanzado a inicios del 2010, el código alojado en el repositorio se almacena de forma pública aunque también se puede almacenar de forma privada siempre y cuando se tenga una cuenta de pago.

\begin{figure}[H]
\centering
\includegraphics[scale=.45]{github.eps}
\caption{Logo Github}
\label{github}
\end{figure}

La instalación y sincronización de Git $\&$ Github con RStudio se realiza de la siguiente manera:
\begin{enumerate}
  \item Descargar e instalar la plataforma específica de Git\footnote{http://www.git-scm.com/} (no Github) con las opciones por default.
  \item Configurar Git con los comandos globales a través de la versión bash, esto permitirá que Git tenga conexión con los repositorios de Github para el envió/recepción de archivos, teclear lo siguiente:
  \begin{center}
  git config –-global user.name ''nombre de la cuenta de Github''\\
  git config –-global user.email ''Github-email@something.com''
  \end{center}
  \item Por último, abrir RStudio y configurar la ruta del ejecutable de Git:\newline Ir a Tools > Options > Git/SVN.
\end{enumerate}


En la actualidad gran cantidad de usuarios R han alojado sus proyectos en el sistema de control de versiones GitHub, Inc. por lo cual se hace necesario contar con una solución al momento de instalar algún paquete alojado en dicho sistema. Nuestra solución consiste en lo siguiente:
<<eval=FALSE>>=
install.packages('devtools', dependencies=TRUE)
devtools::install_github("rstudio/rmarkdown")
@
Iniciamos instalando el paquete \texttt{devtools} el cual nos provee la función \texttt{install\_github}, esta última es la encargada de acceder al sistema Github e instalar el paquete deseado, para esta ocasión hemos seleccionado el paquete \texttt{rmarkdown} alojado en el repositorio Github dentro del proyecto \texttt{rstudio}.\newline

En el caso que se requiera información acerca de un paquete previamente instalado podemos recurrir a:
<<eval=FALSE>>=
library(help='pckgname')
@
También podemos enlistar todas las funciones que han sido implementadas dentro de un paquete como muestra el siguiente ejemplo:
<<eval=TRUE>>=
library(foreign)
ls('package:foreign')
@
Si deseamos conocer los parámetros de cada una de las funciones implementadas dentro de un paquete podemos recurrir a lo siguiente:
<<eval=FALSE>>=
lsf.str('package:foreign')
@

Cuando un paquete es empleado dentro de una investigación surge la necesidad de citar a los autores del paquete, lo anterior lo solventamos mediante el comando \texttt{citation}.
<<eval=FALSE>>=
citation("foreign")

## To cite package ‘foreign’ in publications use:
##
##  R Core Team (2014). foreign: Read Data Stored by Minitab, S, SAS, 
##  SPSS, Stata, Systat, Weka, dBase, .... R
##  package version 0.8-61. http://CRAN.R-project.org/package=foreign
##
## A BibTeX entry for LaTeX users is
##
##  @Manual{,
##    title = {foreign: Read Data Stored by Minitab, S, SAS, SPSS,
##  Stata, Systat, Weka,dBase, ...},
##    author = {{R Core Team}},
##    year = {2014},
##    note = {R package version 0.8-61},
##    url = {http://CRAN.R-project.org/package=foreign},
##  }
@

\section{Actualización de paquetes}

En el caso que se desee actualizar todos los paquetes previamente instalados contamos con el comando \texttt{update.packages}, el mismo que revisa las actualizaciones de los paquetes. El anterior comando nos preguntará si deseamos actualizar uno por uno los paquetes, lo cual es tedioso pues si contamos con un gran número de paquetes nos demandará bastante tiempo aprobar la actualización de los mismos. Para subsanar lo anterior basta añadir el parámetro \texttt{ask = TRUE}.
<<eval=FALSE>>=
update.packages(ask=TRUE)
@
En el caso que se desee conocer únicamente los paquetes que fueron instalados previamente y en la actualidad constan con un versionamiento emplearemos lo siguiente:
<<eval=FALSE>>=
old.packages()
@
El comando anterior nos mostrará la versión del paquete que ha sido instalada y la última versión disponible del mismo.\newline

Para finalizar la sección dejamos un comando útil para los desarrolladores que deseen conocer los autores de los paquetes, así como también las personas que dan mantenimiento a los mismos:
<<eval=FALSE>>=
lapply(dir(R.home("library")), packageDescription)
@

\section{Actualización de R}

Mantener actualizado R y sus paquetes es relativamente fácil a través del tecleo de los siguientes comandos en la consola, los mismos que se detallan a continuación:
<<eval=FALSE>>=
install.packages('installr', dependencies = TRUE)
library('installr')
updateR()
@

Iniciamos instalando el paquete \textbf{installr}, acto seguido procedemos a cargar el paquete a través del comando \texttt{library}, y finalmente, mediante el comando \texttt{updateR} verificamos la versión más reciente del programa  y descargamos la misma.\newline

En el caso que se desee conocer la versión de R que se encuentra instalada podemos teclear en la consola el comando: \texttt{R.version.string} o \texttt{R.version}
<<>>=
R.version.string
@

<<>>=
R.version
@

\section{Obteniendo ayuda}

Existen algunas funciones en R que nos facilitan la vida al momento de indagar sobre la funcionalidad de ciertos comandos con tan sólo tener disponible una conexión de Internet. Por ejemplo, si nos encontramos interesados en obtener información acerca de la función \code{\texttt{seq()}} podemos escribir en la consola lo siguiente:
<<eval=FALSE>>=
help(seq)
@
Una forma alternativa es
<<eval=FALSE>>=
?seq
@
Para el caso que se encuentren trabajando con funciones especificadas por caracteres especiales, el argumento debería ir entre comillas, con el fin de transformarlo en una \emph{cadena de caracteres}:
<<eval=FALSE>>=
help("[[")
@
Se pueden utilizar tanto comillas simples como dobles sin que esto conlleve problemas a posteriori.\newline

Adicionalmente, si nos encontramos interesados en buscar información relacionada al término "normal", o algún otro término en específico podemos teclear lo siguiente:
<<eval=FALSE>>=
help.search("normal")
help.search("termino_especifico")
@

En el caso que se requiera un manual de ayuda completo en formato HMTL, empleamos el comando:
<<eval=FALSE>>=
help.start()
@

Por último, existen circunstancias en las cuales se hace indispensable conocer todas las funciones relacionadas a un nombre en específico. Primero observamos un ejemplo en el cual se obtienen todas las funciones relacionadas con el término {\bf mean}.
<<>>=
apropos("mean")
@
Ahora observamos un ejemplo que obtiene todas las funciones que poseen la letra w en sus nombres.
<<>>=
apropos("w$")
@
Para finalizar observamos un ejemplo que encuentra todos las funciones que tiene un número entre el 4 y 8.
<<>>=
apropos("[4-8]")
@


\section{Mostrando ejemplos}

La mayoría de archivos que dan ayuda incluyen ejemplos que pueden ser ejecutados en R y facilitan al usuario comprender de mejor manera el uso de cierto comando o función. Para ejecutar los ejemplos usaremos el comando \texttt{example} como se muestra a continuación:
<<>>=
example(mean)

example(range)
@

<<echo=FALSE>>=
rm(list=ls())
@



%\section{Interfaces gráficas de usuario}
\chapter{Entornos de desarrollo}

Un entorno de desarrollo integrado, también conocido como IDE (Integrated Development Enviroment) es un programa informático compuesto por un conjunto de herramientas de programación que contiene: un editor, un compilador, un depurador y un constructor de interfaz gráfica (GUI), el mismo que viene empaquetado como un programa \texttt{aplicación} que facilita de sobre manera la realización de operaciones al usuario mediante una serie de menús o mediante interacción con los objetos gráficos que aparecen en pantalla, a través de periféricos como: el ratón y teclado.\newline

Los IDE's fueron desarrollados con el fin de proveer al usuario un marco de trabajo más amigable, a continuación describimos las IDE's más populares para los usuarios:
\begin{multicols}{2}
\begin{itemize}
  \item RStudio
  \item R Analytic Flow
\end{itemize}
\end{multicols}

\section{RStudio}

RStudio es un entorno IDE de código abierto lanzado en Febrero 2011 el cual nos ofrece un marco de trabajo más amigable con el software R y lo podemos encontrar para todas las plataformas (Windows, Mac, Linux) así como también puede ser ejecutado a través de un navegador web\footnote{Opción válida para la versión \texttt{server}.}.

\begin{figure}[H]
\centering
\includegraphics[width=5cm, height=3cm]{rstudio_install.eps}
\caption{Descarga RStudio}
\label{drstudio}
\end{figure}

RStudio puede ser obtenido libremente desde su página web \url{http://www.rstudio.org/}. Una vez obtenido el archivo ejecutable la instalación se la realiza de manera simple e intuitiva.\newline

Una forma de descarga e instalación más técnica de RStudio puede realizarse a partir del siguiente script:
<<eval=FALSE>>=
# descarga e instala el paquete installr
install.packages("installr")
# cargamos el paquete installr
library(installr)
# instalamos RStudio IDE
install.RStudio()
@

RStudio ofrece una amplia integración con ficheros de diversos formatos: R scripts (.R), Markdown (.md), LaTeX (.Rnw) entre otros. La facilidad en la generación de documentos dinámicos con \texttt{RStudio} y \texttt{knitr} han hecho que el programa se convierta en la IDE preferida por muchos usuarios de R.\newline

\begin{figure}[H]
\centering
\includegraphics[scale=.40]{rstudio.eps}
\caption{Interfaz de RStudio}
\label{rstudio}
\end{figure}

El programa se encuentra organizado en cuatro ventanas de trabajo distintas:
\begin{itemize}
  \item {\bf Editor de código fuente:} Se encuentra en la zona superior izquierda, esta ventana nos permite abrir  y editar ficheros con código R.
  \item {\bf Consola:} Se ubica en la zona inferior izquierda, esta ventana es también conocida como consola y nos permite ejecutar comandos de R.
  \item {\bf Navegador de objetos:} La zona superior derecha posee dos ventanas auxiliares:
  \begin{itemize}
    \item {\bf Workspace:} En esta ventana se enlistan todos los objetos creados en memoria.
    \item {\bf History:} En esta ventana se almacena el histórico de las líneas de código que han sido ejecutadas en R. 
  \end{itemize}
  \item {\bf Visualización e información:} Esta última ventana ubicada en la zona inferior derecha se encuentra conformada por 4 ventanas auxiliares:
  \begin{itemize}
    \item {\bf Files:} Provee el acceso al árbol de directorios y ficheros del disco duro.
    \item {\bf Plots:} Ventana auxiliar en la cual aparecen los gráficos creados en la consola.
    \item {\bf Packages:} Esta ventana  facilita la administración de los paquetes de R instalados en el computador.
    \item {\bf Help:} Esta última ventana nos ayuda en la búsqueda de información respecto a un comando en específico.
  \end{itemize}
\end{itemize}

RStudio ofrece varios mecanismos para controlar varios aspectos de la evaluación durante una sesión. La función \texttt{options( )} es empleada para compartir los valores de parámetros entre las funciones.

\subsection{Ancho de impresión}
Existen ocasiones en las cuales el usuario desea controlar el ancho de impresión de los resultados que se muestran en la pantalla, como primer paso para modificar el ancho de impresión debemos obtener el parámetro actual mediante:
<<>>=
getOption("width")
@

Una vez conocido el ancho de pantalla actual procedemos a modificar el mismo cambiando el valor del parámetro \texttt{width}, de la siguiente manera:

<<>>=
options(width=40)
rnorm(10)
@

<<>>=
options(width=55)
rnorm(10)
@

<<>>=
options(width=70)
rnorm(10)
@

\subsection{Prompt}
Para los usuarios que deseen cambiar el simbolo \code{\text{$>$}} del prompt o interpretador por otro símbolo diferente como: \code{\text{$->$}} o por un nombre, tenemos el siguiente código:
<<eval=FALSE>>=
options(prompt="->")
options(prompt="diego >")
@

\subsection{Decimales}
Una preocupación adicional para los usuarios es la cantidad de decimales con la cual se muestran los resultados, dicha cantidad de decimales puede ser modificada y debe encontrarse en el rango de 1 a 22.
<<>>=
getOption("digits")
@
R por default muestran los resultados con 7 decimales, sin embargo los mismos pueden ser modificados como se muestra a continuación:
<<>>=
options(digits=2)
rnorm(3)
@

<<>>=
options(digits=5)
rnorm(3)
@

<<>>=
options(digits=10)
rnorm(3)
@

Existen opciones adicionales que pueden ser modificadas de acuerdo a las necesidades que tenga el usuario, para ver el listado completo de opciones podemos teclear en la consola el comando:
<<eval=FALSE>>=
help(options)
@

\subsection{Respaldando información}

Un tema importante dentro del análisis de datos es el respaldo de información que se pueda dar sobre ciertos resultados obtenidos, en este punto R consta de dos comandos muy útiles: \code{\texttt{save()}} $\&$ \code{\texttt{load()}}.\newline

El primero de ellos permite almacenar en disco los objetos que desee el usuario (almacenamiento parcial), dicho comando puede ser configurado de tal manera que almacene todos los objetos que se encuentra válidos en el área de trabajo.
<<eval=FALSE>>=
# si deseamos guardar el objeto "datos_banco" con el nombre "base" 
save(datos_banco, file = "base.RData")
# para el caso que se desee almacenar todos los objetos con el nombre "info"
save(list = ls(all = TRUE), file = "info.RData")
@

El segundo comando nos va a permitir cargar los objetos guardados en el área de trabajo actual o en un ambiente determinado.
<<eval=FALSE>>=
# cargamos el objeto base en el area de trabajo
load("base.RData")
# ahora cargamos "info" en un ambiente determinado "env"
load("info.RData", envir = env)
@

\section{R Analytic Flow}

R Analytic Flow (RAF) es una interfaz gráfica de usuario desarrollado por Ryota Suzuki\footnote{Ryota Suzuki es un desarrollador de software orientado al análisis de datos, fundó con sus amigos la empresa Ef-prime, Inc. en Tokyo, además es el creador del paquete \emph{pvclust} de R.}, la cual facilita el análisis de datos a través de diagramas de flujo. El software se encuentra bajo licencia BSD $\&$ GPL, por lo cual puede obtenerse de forma gratuita a través de la página web de Ef-prime, Inc. \url{http://www.ef-prime.com} para las plataformas: Windows, Mac OS X y Linux.

\begin{figure}[H]
\centering
\includegraphics[scale=.35]{ranalyticflow.eps}
\caption{R Analytic Flow}
\label{RAF}
\end{figure}

R Analytic Flow permite insertar código de R enmarcado dentro de nodos con la capacidad de ejecutar diferentes rutinas a partir de determinadas conexiones entre nodos.

\subsection{Ventajas}

A continuación enumeramos algunas de las ventajas que posee R Analytic Flow:
\begin{enumerate}
   \item Facilita ejecutar procesos a través de flujos.
   \item Fácil implementación de tareas en cada nodo.
   \item Reduce la complejidad a la hora de programar varias funciones que se relacionen entre sí.
   \item El número de usuarios que usan R Analytic Flow va en aumento debido a las facilidades que presenta.
\end{enumerate}

\subsection{Desventajas}

Algunas de las desventajas por las cuales los usuarios no usan R Analytic Flow:
\begin{enumerate}
   \item Escasa documentación sobre el manejo de la interfaz.
   \item El código fuente se encuentra administrado únicamente por Ef-prime, Inc. Esto impide que se pueda seguir optimizando la interfaz con mayor rapidez.
\end{enumerate}


\chapter{Estructura de datos}

En las secciones anteriores mencionamos que R es un lenguaje de programación orientado a objetos, por lo que cualquier cosa que exista en él tales como: variables, datos, funciones, etc. son objetos. En este capítulo trataremos los diferentes tipos de objetos que R crea y manipula, incluso revisaremos estructuras de almacenamiento de datos más complejas construidas a partir de otras más sencillas.\newline


Durante una sesión de trabajo los objetos que se crean son almacenados por nombre, para enlistar dichos objetos es necesario recurrir al comando \code{\texttt{ls()}} o su equivalente \code{\texttt{objects()}}. La colección de objetos almacenados se denomina espacio de trabajo (\emph{workspace}).
<<>>=
# Inicialmente el area de trabajo se encuentra vacia
ls()
# Generamos 2 vectores
x_vec <- c(1, 2, 3)
y_vec <- c(4, 5, 6)
# Los vectores creados ya se encuentran en el area de trabajo
objects()
@

Vale la pena advertir que el operador de asignación '<-', no es equivalente al operador habitual '=' que se reserva para otro propósito, sino que consiste en dos caracteres '<' (\emph{menor que}) y '-' (\emph{guión}) que obligatoriamente deben ir unidos, además deben apuntar al objeto que recibe el valor de la expresión. Los usuarios principiantes de R suelen confundir estos dos conceptos por lo que en ciertas ocasiones presentan conflictos de interpretabilidad.\newline

La asignación puede realizarse también mediante la función \code{\texttt{assign()}}, la cual es una forma equivalente a la asignación anterior.
<<>>=
# Generamos 2 vectores nuevos
assign("x_new", c(2, 4, 6)) 
assign("y_new", c(3, 5, 7)) 
# Revisamos sus elementos
x_new
y_new
# Verificamos los objetos del espacio de trabajo
ls()
@

En ocasiones los usuarios de R suelen realizar las asignaciones apuntando la flecha a la derecha '->', realizando el cambio obvio en la asignación. Esto no es muy recomendable debido que en la actualidad la tendencia es estandarizar la forma de escritura en R.
<<>>=
# Creamos un nuevo vector
c(5,10,15) -> x_mul
# Revisamos los elementos del vector
x_mul
@

Los nombres que se les asigna a los objetos en R pueden ser de cualquier longitud, y a su vez pueden combinar letras, números y caracteres especiales (coma, punto, guión bajo, etc.), la única exigencia al momento de asignar un nombre a un objeto es que el mismo inicie con una letra (R diferencia mayúsculas de minúsculas). La construcción explícita de un objeto nos proporcionará un mejor entendimiento de su estructura, y nos permitirá ahondar en algunas nociones mencionadas previamente.\newline

Las estructuras de datos en R pueden ser organizados por su dimensionalidad (1 dimensión, 2 dimensiones o n-dimensiones), así como también por su tipo (homogéneo, heterogéneo) lo anterior da lugar a 6 tipos de estructuras que se resumen a continuación:
\begin{table}[H]
\centering
\begin{tabular}{cccc}\hline
{\bf Dimensión} & {\bf 1-d} & {\bf 2-d} & {\bf n-d} \\ \hline
{\bf Homogéneo} & Vector & Matriz & Array \\ \hline
{\bf Heterogéneo} & Lista & Data Frame / Data Table & \\ \hline
\end{tabular}
\caption{Estructura de datos}
\end{table}

En la actualidad ha tomado fuerza el uso de los data tables a diferencias de los data frames, esto debido a las diversas facilidades que poseen los primeras sobre la manipulación de grandes cantidades de información (incorporación del almacenamiento en disco). 

\section{Vectores}
Es la estructura más simple de R que sirve para almacenar un conjunto de valores del mismo o diferente tipo llamados \emph{elementos}. Existen 6 tipos de elementos que R puede almacenar dentro de un vector:
\begin{multicols}{2}
\begin{itemize}
   \item logical
   \item integer
   \item double
   \item complex
   \item character
   \item raw
\end{itemize}
\end{multicols}

\subsection{Creación}

\paragraph{Vectores homogéneos}
~\\

Para la creación de vectores recurriremos a una función interna de R, dicha función es conocida con \emph{concatenación} y es denotada por la letra \code{\texttt{c()}}. Iniciamos mostrando al lector la creación de vectores donde todos sus elementos son del mismo tipo.

<<>>=
# Podemos crear vectores logicos tecleando TRUE y FALSE (o T & F).
logi_var <- c(TRUE, FALSE, TRUE, FALSE)
logi_var
# Usamos el sufijo L, para diferenciar un numero entero
int_var <- c(2L, 4L, 7L, 5L)
int_var
# Usamos el simbolo . para notar los decimales
dbl_var <- c(2.3, 6.8, 4.1)
dbl_var
# Los caracteres deben ir entre comillas
chr_var <- c("statistical", "model", "test")
chr_var
@

La función \code{\texttt{vector}} permite crear vectores de un tipo y longitud determinada, a continuación mostramos unos ejemplos:
<<>>=
# creamos un vector numerico de longitud 5
vector("numeric", 5)
# creamos un vector logico de longitud 5
vector("logical", 5)
# creamos un vector de caracteres de longitud 5
vector("character", 5)
@
Observamos que la función \code{\texttt{vector}} genera vectores con sus valores por default, es decir, para el caso de vectores númericos los inicializa en 0, para el caso de vectores lógicos los inicializa en FALSE, mientras que para los vectores de caracteres los inicializa en vacíos.\newline

Todo vector consta de dos argumentos: \code{\texttt{mode}} $\&$ \code{\texttt{length}}. El primero de ellos especifica el tipo de elementos que almacena el vector, mientras que el segundo argumento especifica la longitud o número de elementos que tiene dicho vector.
<<>>=
# creamos un vector numerico
var <- c(3, 6, 8, 9)
# verificamos el tipo de vector
mode(var)
# mostramos la longitud del vector
length(var)
@

\paragraph{Vectores heterogéneos}
~\\

El usuario tiene toda la facilidad de crear un vector con diferentes tipos de elementos, sin embargo, debido al conflicto que se genera internamente por la \emph{coerción} de los distintos elementos tenemos la siguiente jerarquía:
\begin{table}[H]
\centering
\begin{tabular}{ccccccc} 
$-$ & & & & & & $+$\\ \hline
{\bf logical} & $<$ & {\bf integer} & $<$ & {\bf double} & $<$ & {\bf character} \\ \hline
\end{tabular}
\caption{Flexibilidad de los elementos}
\end{table}

La coerción se produce automáticamente, por tanto, al momento de crear un vector es importante revisar el tipo de elemento de mayor flexibilidad con el fin de conocer a que tipo de vector coercionará el resultado, revisamos algunos ejemplos:
<<>>=
var1 <- c(TRUE, 3L, FALSE, 5L)
mode(var1)

var2 <- c(2+5i, 6L, 8.14701)
mode(var2)

var3 <- c(FALSE, 4L, 3.67012, -4+9i, "model")
mode(var3)
@

Posiblemente al lector le llamó la atención el primer ejemplo \texttt{var1}, debido que el mismo contiene elementos \texttt{logical} $\&$ \texttt{integer} y al momento de conocer el tipo de vector obtenemos \texttt{numeric} en lugar de \texttt{logical}. Esto se debe básicamente a la manera como R almacena y reconoce los diferentes elementos, la siguiente tabla resume lo expuesto.
\begin{table}[H]
\centering
\begin{tabular}{ccc}\hline \hline
{\bf Tipo} & {\bf Modo} & {\bf Almacenamiento} \\ \hline \hline
logical & logical & logical \\ \hline
integer & numeric & integer \\ \hline
double & numeric & double \\ \hline
complex & complex & complex \\ \hline
character & character & character \\ \hline
raw & raw & raw \\ \hline 
\end{tabular}
\caption{Tipos de vectores}
%\label{typevec}
\end{table}

Dentro de la coerción un evento importante se produce cuando un vector logical coerciona a un vector integer o double, pues en estos casos el TRUE se convierte en 1 y el FALSE en 0. 
%Esto es muy útil en conjunción con las funciones \code{\texttt{sum()}} y \code{\texttt{mean()}}.
% # numero de TRUE's
%sum(vec)
%# Proporcion de TRUE's
%mean(vec)
%
<<>>=
# creamos un vector logico
vec <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
# coercionamos a numerico
as.numeric(vec)
@

Para la coerción contamos con varias funciones que nos facilitan el trabajo tales como: \code{\texttt{as.character()}}, \code{\texttt{as.double()}}, \code{\texttt{as.integer()}}, \code{\texttt{as.logical()}}.\newline

\paragraph{Almacenamiento de vectores}
~\\

Una característica importante de los vectores es que se encuentran almacenados de forma plana incluso cuando se anidan vectores como se observa:
<<>>=
c(2L, c(4L, c(6L, 8L)))
# obtenemos el mismo resultado mediante
c(2L, 4L, 6L, 8L)
@

\subsection{Valores perdidos}

En ocasiones puede que no todos los elementos de un vector sean conocidos por diferentes motivos, en este caso nos hacen falta dichos elementos, lo cuales se denominan datos perdidos o faltantes. R permite que el usuario establezca dichos valores perdidos a través del término NA.
<<>>=
#Generamos un vector cuyo tercer elemento es un dato perdido
vec <- c(2, 3, NA, 8)
vec
@

Debido a los distintos tipos de elementos que existen en R, se han creado terminologías para los datos perdidos de acuerdo al tipo de elemento, es por ello que tenemos: 
<<>>=
#NA para elementos numericos
NA_real_
#NA para elementos enteros
NA_integer_
#NA para elementos caracteres
NA_character_
#NA para elementos complejos
NA_complex_
@

Lo anterior evitará que coercionen los elementos de un vector por algún motivo. Para conocer si un vector contiene valores perdidas usaremos la función \code{\texttt{is.na( )}}.
<<>>=
# creamos dos vectores
x <- c(2, 4, 7, 9)
y <- c(3, NA, 8, 13)
# evaluamos si existen valores perdidos
is.na(x)
is.na(y)
@

\subsection{Modificación de elementos}

Los vectores en R son almacenados como arreglos lineales, la ventaja de aquello es que sus elementos se encuentran indexados. Para modificar los elementos de un vector es suficiente conocer la posición de los mismos como se muestra en el siguiente ejemplo:
<<>>=
# creamos un vector
vec <- c(2, 4, 6, 8, 10)
# modificamos el primer elemento por 0
vec[1] <- 0
# visualizamos el vector modificado
vec
@

Sabemos que el tamaño de un vector es determinado en su creación, 



\subsection{Operaciones}















\section{Factores}
Son variables en R que tienen un número limitado de valores diferentes, dichas variables se conocen como variables categóricas a menudo; por ejemplo: el conjunto de observaciones acerca del color de ojos de un grupo de personas. 

<<>>=
ojos <- c("negro", "azul", "negro", "verde", "verde", "cafe", "negro")
table(ojos)
@

\subsection{Uso de factores}
El uso más importante de los factores se encuentra en el modelamiento estadístico; dado que ciertas variables categóricas ingresan a los modelos de manera diferente a las variables continuas.

Los factores en R se almacenan como un vector de valores enteros con un conjunto correspondiente de valores de caracteres para usar cuando aparezca el factor.



\section{Matrices}
Colección de datos a los que se accede por varios índices enteros (dimensiones).

\section{Listas}
Colección ordenada de objetos, en la que los elementos pueden ser de distinto tipo.

\section{Arrays}
Un arreglo (array) de datos es un objeto que puede ser concebido como una matriz multidimensional (hasta 8 dimensiones). Una ventaja de este tipo de objeto es que sigue las reglas que hemos descrito para las matrices. La sintaxis para definir un arreglo es
<<eval=FALSE>>=
array(data, dim)
@
Las componentes data y dim deben presentarse como una sola expresión, por ejemplo
<<eval=FALSE>>=
c(2,4,6,8,10)
c(2,3,2)
x <- array (1:24, c(3,4,2))
@

produce un arreglo tridimensional: la primera dimensión tiene tres niveles, la segunda tiene cuatro y la tercera tiene dos. Al imprimir el arreglo R comienza con la dimensión mayor y va bajando hacia la dimensión menor, imprimiendo matrices bidimensionales en cada etapa.

\section{Data Frames}
Tipo particular de listas de gran utilidad para el trabajo estadístico.

\section{Data Tables}
Tipo particular de listas de gran utilidad para el trabajo estadístico.

\chapter{Funciones}

\section{Componentes}

Todas las funciones constan de tres partes:
\begin{itemize}
   \item body(): Corresponde al código que se encuentra dentro de la función.
   \item formals(): Corresponde a la lista de argumentos que controlan la llamada a la función.
   \item environment(): Localización de las variables de la función.
\end{itemize}

SI el ambiente no se visualiza significa que la función fue creada en el ambiente global.


\section{Funciones primitivas}

Existe un excepción para la regla que todas las funciones tienen 3 componentes; las funciones primitivas tales como sum(), se encuentran construidas en C por lo cual no cumple con lo antes mencionado.

\section{Lexical Scoping}

\subsection{Name Masking}
\subsection{Function vs Variables}
\subsection{Fresh Start}
\subsection{Dynamic Lookup}



\end{document}